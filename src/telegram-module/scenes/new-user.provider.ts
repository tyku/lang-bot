import { Scenes } from 'telegraf';
import { InlineKeyboardButton } from '@telegraf/types';
import { Ctx, Message, Scene, SceneEnter } from 'nestjs-telegraf';

import { UserProvider } from '../../user-module/user.provider';
import { ContextProvider } from '../../context-module/context.provider';

import type { TMessageType } from '../types/message';

@Scene('NEWUSER_SCENE_ID')
export class NewUserProvider {
  constructor(
    private userProvider: UserProvider,
    private contextProvider: ContextProvider,
  ) {}

  @SceneEnter()
  async onSceneEnter(
    @Ctx() ctx: Scenes.SceneContext,
    @Message('chat') chat: TMessageType['chat'],
  ) {
    const { id: chatId, first_name: firstName, username } = chat;

    await this.userProvider.createUserIfNotExists(chatId, {
      firstName,
      username,
    });

    const user = firstName || username;

    const activeContexts = await this.contextProvider.getAllActive([
      'name',
      'alias',
      'order',
    ]);

    const sortedContext = activeContexts.sort(
      (contextA, contextB) => contextA.order - contextB.order,
    );

    const menuButtons = sortedContext.reduce((acc, item) => {
      const { name, alias } = item;

      const button = {
        text: name,
        callback_data: `trainer:${alias}`,
      };
      acc.push([button]);

      return acc;
    }, [] as InlineKeyboardButton[][]);

    await ctx.replyWithMarkdownV2(
      `üòè –ü—Ä–∏–≤–µ—Ç${user ? ', ' + user : ''}\\! –Ø \\- –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å\\.\n` +
        '\n' +
        'üöÄ –ü–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\\. ‚ú®\n' +
        '\n' +
        'üì£ –£ –º–µ–Ω—è –≤ –∑–∞–ø–∞—Å–µ, –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ \n' +
        '\n' +
        'üì∑ –í—ã–±–µ—Ä–∏ —Ç–µ–º—É, –Ω–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∞ —è –ø–æ–¥—Å–∫–∞–∂—É, –≥–¥–µ –æ—à–∏–±–∫–∏ –∏ –æ–±—ä—è—Å–Ω—é –∏—Ö\\! üí´\n',
      {
        reply_markup: {
          inline_keyboard: [
            ...menuButtons,
            [
              {
                text: 'üì¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                url: 'https://t.me/RabbitHole_support',
              },
              // { text: 'ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data: 'referral' },
            ],
          ],
        },
      },
    );

    await ctx.scene.leave();
  }
}
