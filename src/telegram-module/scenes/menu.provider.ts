import { Scene, SceneEnter, Ctx } from 'nestjs-telegraf';

import { Scenes } from 'telegraf';
import { ContextProvider } from '../../context-module/context.provider';
import { InlineKeyboardButton } from '@telegraf/types';

type TSession = { session: { source: string; __scenes: Record<string, any> } };
type TUpdate = { update: any };

@Scene('MENU_SCENE_ID')
export class MenuProvider {
  constructor(private contextProvider: ContextProvider) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: Scenes.SceneContext & TUpdate & TSession) {
    // const chatId =
    //   ctx.update?.message?.chat?.id ||
    //   ctx.update?.callback_query?.message?.chat?.id;

    const activeContexts = await this.contextProvider.getAllActive([
      'name',
      'alias',
    ]);

    const menuButtons = activeContexts.reduce((acc, item) => {
      const { name, alias } = item;

      const button = {
        text: name,
        callback_data: `load_${alias}`,
      };

      acc.push(button);

      return acc;
    }, [] as InlineKeyboardButton[]);

    await ctx.replyWithMarkdownV2(
      'üòè –ü—Ä–∏–≤–µ—Ç\\! –Ø - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å\\.\n' +
        '\n' +
        'üöÄ –ü–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\\. ‚ú®\n' +
        '\n' +
        'üì£ –£ –º–µ–Ω—è –≤ –∑–∞–ø–∞—Å–µ, –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ \n' +
        '\n' +
        'üì∑ –í—ã–±–µ—Ä–∏ —Ç–µ–º—É, –Ω–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∞ —è –ø–æ–¥—Å–∫–∞–∂—É, –≥–¥–µ –æ—à–∏–±–∫–∏ –∏ –æ–±—ä—è—Å–Ω—é –∏—Ö\\! üí´\n',
      {
        reply_markup: {
          inline_keyboard: [
            menuButtons,
            [
              {
                text: 'üì¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                url: 'https://t.me/RabbitHole_support',
              },
              // { text: 'ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data: 'referral' },
            ],
          ],
        },
      },
    );
  }
}
